//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AuthClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @param body (optional)
   * @return Created
   */
  create(body: SendMagicLinkRequest | undefined): Promise<string> {
    let url_ = this.baseUrl + '/v1/auth/send-magic-link';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = resultData201 !== undefined ? resultData201 : <any>null;

        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<string>(null as any);
  }

  redirectToDashboard(email: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/auth/redirect?';
    if (email === null)
      throw new Error("The parameter 'email' cannot be null.");
    else if (email !== undefined)
      url_ += 'email=' + encodeURIComponent('' + email) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRedirectToDashboard(_response);
    });
  }

  protected processRedirectToDashboard(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Created
   */
  createToken(userId: number): Promise<string> {
    let url_ = this.baseUrl + '/v1/auth/create-token/{userId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateToken(_response);
    });
  }

  protected processCreateToken(response: Response): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = resultData201 !== undefined ? resultData201 : <any>null;

        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<string>(null as any);
  }

  passwordLogin(body: PasswordLoginRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/auth/password-login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processPasswordLogin(_response);
    });
  }

  protected processPasswordLogin(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param token (optional)
   * @param returnUrl (optional)
   * @return OK
   */
  verifyEmail(
    token: string | undefined,
    returnUrl: string | undefined
  ): Promise<VerifyEmailRequest> {
    let url_ = this.baseUrl + '/v1/auth/VerifyEmail?';
    if (token === null)
      throw new Error("The parameter 'token' cannot be null.");
    else if (token !== undefined)
      url_ += 'token=' + encodeURIComponent('' + token) + '&';
    if (returnUrl === null)
      throw new Error("The parameter 'returnUrl' cannot be null.");
    else if (returnUrl !== undefined)
      url_ += 'returnUrl=' + encodeURIComponent('' + returnUrl) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processVerifyEmail(_response);
    });
  }

  protected processVerifyEmail(
    response: Response
  ): Promise<VerifyEmailRequest> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = VerifyEmailRequest.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<VerifyEmailRequest>(null as any);
  }

  initiateGoogleLogin(returnUrl: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/auth/external-login/google?';
    if (returnUrl === null)
      throw new Error("The parameter 'returnUrl' cannot be null.");
    else if (returnUrl !== undefined)
      url_ += 'returnUrl=' + encodeURIComponent('' + returnUrl) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processInitiateGoogleLogin(_response);
    });
  }

  protected processInitiateGoogleLogin(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  googleLoginCallback(returnUrl: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/auth/external-login/google-callback?';
    if (returnUrl === null)
      throw new Error("The parameter 'returnUrl' cannot be null.");
    else if (returnUrl !== undefined)
      url_ += 'returnUrl=' + encodeURIComponent('' + returnUrl) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGoogleLoginCallback(_response);
    });
  }

  protected processGoogleLoginCallback(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class CategoriesClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  getCategories(parentId: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/categories?';
    if (parentId === null)
      throw new Error("The parameter 'parentId' cannot be null.");
    else if (parentId !== undefined)
      url_ += 'parentId=' + encodeURIComponent('' + parentId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetCategories(_response);
    });
  }

  protected processGetCategories(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  create(body: CategoryCreateModel | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/categories';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return OK
   */
  getCategory(id: string): Promise<CategoryPageModel> {
    let url_ = this.baseUrl + '/v1/categories/page/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetCategory(_response);
    });
  }

  protected processGetCategory(response: Response): Promise<CategoryPageModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CategoryPageModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<CategoryPageModel>(null as any);
  }

  getCategoryCourses(
    id: string,
    skip: number | undefined,
    take: number | undefined,
    sortBy: string | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/categories/{id}/courses?';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    if (skip === null) throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += 'skip=' + encodeURIComponent('' + skip) + '&';
    if (take === null) throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += 'take=' + encodeURIComponent('' + take) + '&';
    if (sortBy === null)
      throw new Error("The parameter 'sortBy' cannot be null.");
    else if (sortBy !== undefined)
      url_ += 'sortBy=' + encodeURIComponent('' + sortBy) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetCategoryCourses(_response);
    });
  }

  protected processGetCategoryCourses(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  getAll(parentId: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/categories/all?';
    if (parentId === null)
      throw new Error("The parameter 'parentId' cannot be null.");
    else if (parentId !== undefined)
      url_ += 'parentId=' + encodeURIComponent('' + parentId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAll(_response);
    });
  }

  protected processGetAll(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  getById(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/categories/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetById(_response);
    });
  }

  protected processGetById(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  update(id: string, body: CategoryUpdateModel | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/categories/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  delete(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/categories/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class CourseTypeClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  create(body: CourseTypeCreateModel | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/course-type';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  getAll(): Promise<void> {
    let url_ = this.baseUrl + '/v1/course-type';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAll(_response);
    });
  }

  protected processGetAll(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  getById(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/course-type/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetById(_response);
    });
  }

  protected processGetById(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  update(id: string, body: CourseTypeUpdateModel | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/course-type/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  delete(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/course-type/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  getRoadmaps(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/course-type/{id}/roadmaps';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetRoadmaps(_response);
    });
  }

  protected processGetRoadmaps(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class ExploreClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getExplorePage(): Promise<ExplorePageModel> {
    let url_ = this.baseUrl + '/v1/explore/page';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetExplorePage(_response);
    });
  }

  protected processGetExplorePage(
    response: Response
  ): Promise<ExplorePageModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ExplorePageModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ExplorePageModel>(null as any);
  }

  getNewCourses(
    skip: number | undefined,
    take: number | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/explore/new?';
    if (skip === null) throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += 'skip=' + encodeURIComponent('' + skip) + '&';
    if (take === null) throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += 'take=' + encodeURIComponent('' + take) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetNewCourses(_response);
    });
  }

  protected processGetNewCourses(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  getTopCourses(
    skip: number | undefined,
    take: number | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/explore/top?';
    if (skip === null) throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += 'skip=' + encodeURIComponent('' + skip) + '&';
    if (take === null) throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += 'take=' + encodeURIComponent('' + take) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetTopCourses(_response);
    });
  }

  protected processGetTopCourses(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  getBetterYouCourses(
    skip: number | undefined,
    take: number | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/explore/better-you?';
    if (skip === null) throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += 'skip=' + encodeURIComponent('' + skip) + '&';
    if (take === null) throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += 'take=' + encodeURIComponent('' + take) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetBetterYouCourses(_response);
    });
  }

  protected processGetBetterYouCourses(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class LessonsClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getById(id: string): Promise<LessonModel> {
    let url_ = this.baseUrl + '/v1/lessons/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetById(_response);
    });
  }

  protected processGetById(response: Response): Promise<LessonModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LessonModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<LessonModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  update(id: string, body: LessonUpdateRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/lessons/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return No Content
   */
  delete(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/lessons/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param search (optional)
   * @param includeColumns (optional)
   * @param filters (optional)
   * @param sorts (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @return OK
   */
  filter(
    search: string | undefined,
    includeColumns: boolean | undefined,
    filters: string | undefined,
    sorts: string | undefined,
    page: number | undefined,
    pageSize: number | undefined
  ): Promise<LessonModelFiltered> {
    let url_ = this.baseUrl + '/v1/lessons?';
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += 'search=' + encodeURIComponent('' + search) + '&';
    if (includeColumns === null)
      throw new Error("The parameter 'includeColumns' cannot be null.");
    else if (includeColumns !== undefined)
      url_ += 'includeColumns=' + encodeURIComponent('' + includeColumns) + '&';
    if (filters === null)
      throw new Error("The parameter 'filters' cannot be null.");
    else if (filters !== undefined)
      url_ += 'filters=' + encodeURIComponent('' + filters) + '&';
    if (sorts === null)
      throw new Error("The parameter 'sorts' cannot be null.");
    else if (sorts !== undefined)
      url_ += 'sorts=' + encodeURIComponent('' + sorts) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'pageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFilter(_response);
    });
  }

  protected processFilter(response: Response): Promise<LessonModelFiltered> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LessonModelFiltered.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<LessonModelFiltered>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  generatedPage(body: LessonCreateRequest | undefined): Promise<LessonModel> {
    let url_ = this.baseUrl + '/v1/lessons';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGeneratedPage(_response);
    });
  }

  protected processGeneratedPage(response: Response): Promise<LessonModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = LessonModel.fromJS(resultData201);
        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<LessonModel>(null as any);
  }
}

export class LicenseClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  handleOAuthRedirect(code: string | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/license/oauth/redirect?';
    if (code === null) throw new Error("The parameter 'code' cannot be null.");
    else if (code !== undefined)
      url_ += 'code=' + encodeURIComponent('' + code) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processHandleOAuthRedirect(_response);
    });
  }

  protected processHandleOAuthRedirect(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  completeRegistration(
    body: CompleteRegistrationRequest | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/license/complete-registration';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCompleteRegistration(_response);
    });
  }

  protected processCompleteRegistration(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  handleWebhook(body: AppSumoWebhookRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/license/appsumo/webhook';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processHandleWebhook(_response);
    });
  }

  protected processHandleWebhook(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class PurchaseClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  createPayment(body: CreatePaymentRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/purchase/create';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreatePayment(_response);
    });
  }

  protected processCreatePayment(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  loginByPaymentDetails(body: PaymentLoginRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/purchase/login-by-payment-details';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processLoginByPaymentDetails(_response);
    });
  }

  protected processLoginByPaymentDetails(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  handleCallback(): Promise<void> {
    let url_ = this.baseUrl + '/v1/purchase/callback';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processHandleCallback(_response);
    });
  }

  protected processHandleCallback(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  buyPlan(body: BuyPlanRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/purchase/buy-plan';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processBuyPlan(_response);
    });
  }

  protected processBuyPlan(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException('Forbidden', status, _responseText, _headers);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  deletePlan(body: DeletePlanRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/purchase/delete-plan';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeletePlan(_response);
    });
  }

  protected processDeletePlan(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException('Forbidden', status, _responseText, _headers);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  updateDefaultUsers(
    body: UpdateDefaultUsersRequest | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/purchase/update-default-users';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateDefaultUsers(_response);
    });
  }

  protected processUpdateDefaultUsers(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  updateUsersTokens(body: UpdateUsersTokensRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/purchase/update-users-tokens';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateUsersTokens(_response);
    });
  }

  protected processUpdateUsersTokens(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class RelationsClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  addRoadmapToCategory(
    categoryId: string,
    roadmapId: string,
    body: PositionRequest | undefined
  ): Promise<void> {
    let url_ =
      this.baseUrl +
      '/v1/relations/categories/{categoryId}/roadmaps/{roadmapId}';
    if (categoryId === undefined || categoryId === null)
      throw new Error("The parameter 'categoryId' must be defined.");
    url_ = url_.replace('{categoryId}', encodeURIComponent('' + categoryId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddRoadmapToCategory(_response);
    });
  }

  protected processAddRoadmapToCategory(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  removeRoadmapFromCategory(
    categoryId: string,
    roadmapId: string
  ): Promise<void> {
    let url_ =
      this.baseUrl +
      '/v1/relations/categories/{categoryId}/roadmaps/{roadmapId}';
    if (categoryId === undefined || categoryId === null)
      throw new Error("The parameter 'categoryId' must be defined.");
    url_ = url_.replace('{categoryId}', encodeURIComponent('' + categoryId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRemoveRoadmapFromCategory(_response);
    });
  }

  protected processRemoveRoadmapFromCategory(
    response: Response
  ): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  reorderCategoryRoadmaps(
    categoryId: string,
    body: { [key: string]: number } | undefined
  ): Promise<void> {
    let url_ =
      this.baseUrl + '/v1/relations/categories/{categoryId}/roadmaps/reorder';
    if (categoryId === undefined || categoryId === null)
      throw new Error("The parameter 'categoryId' must be defined.");
    url_ = url_.replace('{categoryId}', encodeURIComponent('' + categoryId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processReorderCategoryRoadmaps(_response);
    });
  }

  protected processReorderCategoryRoadmaps(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  normalizePositions(categoryId: string): Promise<void> {
    let url_ =
      this.baseUrl + '/v1/relations/categories/{categoryId}/roadmaps/normalize';
    if (categoryId === undefined || categoryId === null)
      throw new Error("The parameter 'categoryId' must be defined.");
    url_ = url_.replace('{categoryId}', encodeURIComponent('' + categoryId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processNormalizePositions(_response);
    });
  }

  protected processNormalizePositions(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  addSubcategory(
    parentId: string,
    childId: string,
    body: AddCategoryRelationRequest | undefined
  ): Promise<void> {
    let url_ =
      this.baseUrl +
      '/v1/relations/categories/{parentId}/subcategories/{childId}';
    if (parentId === undefined || parentId === null)
      throw new Error("The parameter 'parentId' must be defined.");
    url_ = url_.replace('{parentId}', encodeURIComponent('' + parentId));
    if (childId === undefined || childId === null)
      throw new Error("The parameter 'childId' must be defined.");
    url_ = url_.replace('{childId}', encodeURIComponent('' + childId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddSubcategory(_response);
    });
  }

  protected processAddSubcategory(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  removeSubcategory(parentId: string, childId: string): Promise<void> {
    let url_ =
      this.baseUrl +
      '/v1/relations/categories/{parentId}/subcategories/{childId}';
    if (parentId === undefined || parentId === null)
      throw new Error("The parameter 'parentId' must be defined.");
    url_ = url_.replace('{parentId}', encodeURIComponent('' + parentId));
    if (childId === undefined || childId === null)
      throw new Error("The parameter 'childId' must be defined.");
    url_ = url_.replace('{childId}', encodeURIComponent('' + childId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRemoveSubcategory(_response);
    });
  }

  protected processRemoveSubcategory(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  addTypeToRoadmap(typeId: string, roadmapId: string): Promise<void> {
    let url_ =
      this.baseUrl + '/v1/relations/types/{typeId}/roadmaps/{roadmapId}';
    if (typeId === undefined || typeId === null)
      throw new Error("The parameter 'typeId' must be defined.");
    url_ = url_.replace('{typeId}', encodeURIComponent('' + typeId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddTypeToRoadmap(_response);
    });
  }

  protected processAddTypeToRoadmap(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  removeTypeFromRoadmap(typeId: string, roadmapId: string): Promise<void> {
    let url_ =
      this.baseUrl + '/v1/relations/types/{typeId}/roadmaps/{roadmapId}';
    if (typeId === undefined || typeId === null)
      throw new Error("The parameter 'typeId' must be defined.");
    url_ = url_.replace('{typeId}', encodeURIComponent('' + typeId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRemoveTypeFromRoadmap(_response);
    });
  }

  protected processRemoveTypeFromRoadmap(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class RoadmapsClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getById(id: string): Promise<RoadmapModel> {
    let url_ = this.baseUrl + '/v1/roadmaps/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetById(_response);
    });
  }

  protected processGetById(response: Response): Promise<RoadmapModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoadmapModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<RoadmapModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  update(id: string, body: RoadmapUpdateRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return No Content
   */
  delete(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param search (optional)
   * @param includeColumns (optional)
   * @param filters (optional)
   * @param sorts (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @return OK
   */
  filter(
    search: string | undefined,
    includeColumns: boolean | undefined,
    filters: string | undefined,
    sorts: string | undefined,
    page: number | undefined,
    pageSize: number | undefined
  ): Promise<RoadmapModelFiltered> {
    let url_ = this.baseUrl + '/v1/roadmaps?';
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += 'search=' + encodeURIComponent('' + search) + '&';
    if (includeColumns === null)
      throw new Error("The parameter 'includeColumns' cannot be null.");
    else if (includeColumns !== undefined)
      url_ += 'includeColumns=' + encodeURIComponent('' + includeColumns) + '&';
    if (filters === null)
      throw new Error("The parameter 'filters' cannot be null.");
    else if (filters !== undefined)
      url_ += 'filters=' + encodeURIComponent('' + filters) + '&';
    if (sorts === null)
      throw new Error("The parameter 'sorts' cannot be null.");
    else if (sorts !== undefined)
      url_ += 'sorts=' + encodeURIComponent('' + sorts) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'pageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFilter(_response);
    });
  }

  protected processFilter(response: Response): Promise<RoadmapModelFiltered> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoadmapModelFiltered.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<RoadmapModelFiltered>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  create(body: RoadmapCreateRequest | undefined): Promise<RoadmapModel> {
    let url_ = this.baseUrl + '/v1/roadmaps';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<RoadmapModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = RoadmapModel.fromJS(resultData201);
        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<RoadmapModel>(null as any);
  }

  /**
   * @return OK
   */
  getUserLikeById(userId: number, roadmapId: string): Promise<UserLikeModel> {
    let url_ = this.baseUrl + '/v1/roadmaps/{roadmapId}/userlikes/{userId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetUserLikeById(_response);
    });
  }

  protected processGetUserLikeById(response: Response): Promise<UserLikeModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserLikeModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserLikeModel>(null as any);
  }

  /**
   * @return No Content
   */
  delete2(userId: number, roadmapId: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/{roadmapId}/userlikes/{userId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete2(_response);
    });
  }

  protected processDelete2(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  addUserLike(body: UserLikeAddRequest | undefined): Promise<UserLikeModel> {
    let url_ = this.baseUrl + '/v1/roadmaps/userlikes';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddUserLike(_response);
    });
  }

  protected processAddUserLike(response: Response): Promise<UserLikeModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = UserLikeModel.fromJS(resultData201);
        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserLikeModel>(null as any);
  }

  generateThumbnail(body: GenerateImageRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/generate-thumbnail';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGenerateThumbnail(_response);
    });
  }

  protected processGenerateThumbnail(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  generateThumbnails(): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/generate-empty-thumbnails';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGenerateThumbnails(_response);
    });
  }

  protected processGenerateThumbnails(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  setDefaultThumbnail(
    id: string,
    thumbnailUrl: string | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/{id}/set-default-thumbnail?';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    if (thumbnailUrl === null)
      throw new Error("The parameter 'thumbnailUrl' cannot be null.");
    else if (thumbnailUrl !== undefined)
      url_ += 'thumbnailUrl=' + encodeURIComponent('' + thumbnailUrl) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'PUT',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processSetDefaultThumbnail(_response);
    });
  }

  protected processSetDefaultThumbnail(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class ServerInfoClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getInfo(): Promise<ServerInfoModel> {
    let url_ = this.baseUrl + '/v1/server-info';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetInfo(_response);
    });
  }

  protected processGetInfo(response: Response): Promise<ServerInfoModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ServerInfoModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ServerInfoModel>(null as any);
  }
}

export class TokensClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getBalance(): Promise<string> {
    let url_ = this.baseUrl + '/v1/tokens/balance';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetBalance(_response);
    });
  }

  protected processGetBalance(response: Response): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;

        return result200;
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException('Forbidden', status, _responseText, _headers);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<string>(null as any);
  }

  refillTokens(body: RefillTokensRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/tokens/refill';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRefillTokens(_response);
    });
  }

  protected processRefillTokens(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class UsersClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return OK
   */
  getCurrentUser(): Promise<UserModel> {
    let url_ = this.baseUrl + '/v1/users/me';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetCurrentUser(_response);
    });
  }

  protected processGetCurrentUser(response: Response): Promise<UserModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserModel.fromJS(resultData200);
        return result200;
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException('Forbidden', status, _responseText, _headers);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserModel>(null as any);
  }

  /**
   * @return OK
   */
  get(id: number): Promise<UserModel> {
    let url_ = this.baseUrl + '/v1/users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGet(_response);
    });
  }

  protected processGet(response: Response): Promise<UserModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  update(id: number, body: UserUpdateRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException('Forbidden', status, _responseText, _headers);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return No Content
   */
  delete(id: number): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  create(body: UserCreateRequest | undefined): Promise<UserModel> {
    let url_ = this.baseUrl + '/v1/users';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<UserModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = UserModel.fromJS(resultData201);
        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserModel>(null as any);
  }

  /**
   * @param userIdQuery (optional)
   * @param search (optional)
   * @param includeColumns (optional)
   * @param filters (optional)
   * @param sorts (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @return OK
   */
  getUserRoadmaps(
    userIdPath: number,
    userIdQuery: number | undefined,
    search: string | undefined,
    includeColumns: boolean | undefined,
    filters: string | undefined,
    sorts: string | undefined,
    page: number | undefined,
    pageSize: number | undefined
  ): Promise<UserRoadmapModelFiltered> {
    let url_ = this.baseUrl + '/v1/users/{userId}/roadmaps?';
    if (userIdPath === undefined || userIdPath === null)
      throw new Error("The parameter 'userIdPath' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userIdPath));
    if (userIdQuery === null)
      throw new Error("The parameter 'userIdQuery' cannot be null.");
    else if (userIdQuery !== undefined)
      url_ += 'userId=' + encodeURIComponent('' + userIdQuery) + '&';
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += 'search=' + encodeURIComponent('' + search) + '&';
    if (includeColumns === null)
      throw new Error("The parameter 'includeColumns' cannot be null.");
    else if (includeColumns !== undefined)
      url_ += 'includeColumns=' + encodeURIComponent('' + includeColumns) + '&';
    if (filters === null)
      throw new Error("The parameter 'filters' cannot be null.");
    else if (filters !== undefined)
      url_ += 'filters=' + encodeURIComponent('' + filters) + '&';
    if (sorts === null)
      throw new Error("The parameter 'sorts' cannot be null.");
    else if (sorts !== undefined)
      url_ += 'sorts=' + encodeURIComponent('' + sorts) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'pageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetUserRoadmaps(_response);
    });
  }

  protected processGetUserRoadmaps(
    response: Response
  ): Promise<UserRoadmapModelFiltered> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserRoadmapModelFiltered.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserRoadmapModelFiltered>(null as any);
  }

  /**
   * @return OK
   */
  getUserRoadmapById(
    userId: number,
    roadmapId: string
  ): Promise<UserRoadmapModel> {
    let url_ = this.baseUrl + '/v1/users/{userId}/roadmaps/{roadmapId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetUserRoadmapById(_response);
    });
  }

  protected processGetUserRoadmapById(
    response: Response
  ): Promise<UserRoadmapModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserRoadmapModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserRoadmapModel>(null as any);
  }

  /**
   * @return Created
   */
  addUserRoadmap(userId: number, roadmapId: string): Promise<UserRoadmapModel> {
    let url_ = this.baseUrl + '/v1/users/{userId}/roadmaps/{roadmapId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'POST',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddUserRoadmap(_response);
    });
  }

  protected processAddUserRoadmap(
    response: Response
  ): Promise<UserRoadmapModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = UserRoadmapModel.fromJS(resultData201);
        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserRoadmapModel>(null as any);
  }

  /**
   * @return No Content
   */
  delete2(userId: number, roadmapId: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/{userId}/roadmaps/{roadmapId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (roadmapId === undefined || roadmapId === null)
      throw new Error("The parameter 'roadmapId' must be defined.");
    url_ = url_.replace('{roadmapId}', encodeURIComponent('' + roadmapId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete2(_response);
    });
  }

  protected processDelete2(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  updateUserQuiz(
    userId: number,
    quizId: string,
    body: UserQuizResultUpdateRequest | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/{userId}/quizzes/{quizId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (quizId === undefined || quizId === null)
      throw new Error("The parameter 'quizId' must be defined.");
    url_ = url_.replace('{quizId}', encodeURIComponent('' + quizId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateUserQuiz(_response);
    });
  }

  protected processUpdateUserQuiz(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param userIdQuery (optional)
   * @param search (optional)
   * @param includeColumns (optional)
   * @param filters (optional)
   * @param sorts (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @return OK
   */
  getUserQuizzes(
    userIdPath: number,
    userIdQuery: number | undefined,
    search: string | undefined,
    includeColumns: boolean | undefined,
    filters: string | undefined,
    sorts: string | undefined,
    page: number | undefined,
    pageSize: number | undefined
  ): Promise<UserQuizModelFiltered> {
    let url_ = this.baseUrl + '/v1/users/{userId}/quizzes?';
    if (userIdPath === undefined || userIdPath === null)
      throw new Error("The parameter 'userIdPath' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userIdPath));
    if (userIdQuery === null)
      throw new Error("The parameter 'userIdQuery' cannot be null.");
    else if (userIdQuery !== undefined)
      url_ += 'userId=' + encodeURIComponent('' + userIdQuery) + '&';
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += 'search=' + encodeURIComponent('' + search) + '&';
    if (includeColumns === null)
      throw new Error("The parameter 'includeColumns' cannot be null.");
    else if (includeColumns !== undefined)
      url_ += 'includeColumns=' + encodeURIComponent('' + includeColumns) + '&';
    if (filters === null)
      throw new Error("The parameter 'filters' cannot be null.");
    else if (filters !== undefined)
      url_ += 'filters=' + encodeURIComponent('' + filters) + '&';
    if (sorts === null)
      throw new Error("The parameter 'sorts' cannot be null.");
    else if (sorts !== undefined)
      url_ += 'sorts=' + encodeURIComponent('' + sorts) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'pageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetUserQuizzes(_response);
    });
  }

  protected processGetUserQuizzes(
    response: Response
  ): Promise<UserQuizModelFiltered> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserQuizModelFiltered.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserQuizModelFiltered>(null as any);
  }

  getUserRoles(): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/roles';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetUserRoles(_response);
    });
  }

  protected processGetUserRoles(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException('Forbidden', status, _responseText, _headers);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class WelcomeClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @param skip (optional)
   * @param take (optional)
   * @return OK
   */
  welcomeCourses(
    skip: number | undefined,
    take: number | undefined
  ): Promise<WelcomePageModel> {
    let url_ = this.baseUrl + '/v1/welcome/page?';
    if (skip === null) throw new Error("The parameter 'skip' cannot be null.");
    else if (skip !== undefined)
      url_ += 'skip=' + encodeURIComponent('' + skip) + '&';
    if (take === null) throw new Error("The parameter 'take' cannot be null.");
    else if (take !== undefined)
      url_ += 'take=' + encodeURIComponent('' + take) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processWelcomeCourses(_response);
    });
  }

  protected processWelcomeCourses(
    response: Response
  ): Promise<WelcomePageModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = WelcomePageModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<WelcomePageModel>(null as any);
  }
}

export class AddCategoryRelationRequest implements IAddCategoryRelationRequest {
  order?: number;

  constructor(data?: IAddCategoryRelationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.order = _data['order'];
    }
  }

  static fromJS(data: any): AddCategoryRelationRequest {
    data = typeof data === 'object' ? data : {};
    let result = new AddCategoryRelationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['order'] = this.order;
    return data;
  }
}

export interface IAddCategoryRelationRequest {
  order?: number;
}

export class AppSumoWebhookRequest implements IAppSumoWebhookRequest {
  license_key?: string;
  prev_license_key?: string | undefined;
  plan_id?: string;
  event?: string;
  license_status?: string;
  event_timestamp?: number;
  created_at?: number;
  tier?: number | undefined;
  test?: boolean;
  extra?: WebhookExtra;

  constructor(data?: IAppSumoWebhookRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.license_key = _data['license_key'];
      this.prev_license_key = _data['prev_license_key'];
      this.plan_id = _data['plan_id'];
      this.event = _data['event'];
      this.license_status = _data['license_status'];
      this.event_timestamp = _data['event_timestamp'];
      this.created_at = _data['created_at'];
      this.tier = _data['tier'];
      this.test = _data['test'];
      this.extra = _data['extra']
        ? WebhookExtra.fromJS(_data['extra'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): AppSumoWebhookRequest {
    data = typeof data === 'object' ? data : {};
    let result = new AppSumoWebhookRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['license_key'] = this.license_key;
    data['prev_license_key'] = this.prev_license_key;
    data['plan_id'] = this.plan_id;
    data['event'] = this.event;
    data['license_status'] = this.license_status;
    data['event_timestamp'] = this.event_timestamp;
    data['created_at'] = this.created_at;
    data['tier'] = this.tier;
    data['test'] = this.test;
    data['extra'] = this.extra ? this.extra.toJSON() : <any>undefined;
    return data;
  }
}

export interface IAppSumoWebhookRequest {
  license_key?: string;
  prev_license_key?: string | undefined;
  plan_id?: string;
  event?: string;
  license_status?: string;
  event_timestamp?: number;
  created_at?: number;
  tier?: number | undefined;
  test?: boolean;
  extra?: WebhookExtra;
}

export class BuyPlanRequest implements IBuyPlanRequest {
  plan?: string;

  constructor(data?: IBuyPlanRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.plan = _data['plan'];
    }
  }

  static fromJS(data: any): BuyPlanRequest {
    data = typeof data === 'object' ? data : {};
    let result = new BuyPlanRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['plan'] = this.plan;
    return data;
  }
}

export interface IBuyPlanRequest {
  plan?: string;
}

export class CategoryCreateModel implements ICategoryCreateModel {
  title?: string;
  description?: string | undefined;
  colorHex?: string;
  order?: number;
  parentCategoryId?: string | undefined;

  constructor(data?: ICategoryCreateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.description = _data['description'];
      this.colorHex = _data['colorHex'];
      this.order = _data['order'];
      this.parentCategoryId = _data['parentCategoryId'];
    }
  }

  static fromJS(data: any): CategoryCreateModel {
    data = typeof data === 'object' ? data : {};
    let result = new CategoryCreateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['description'] = this.description;
    data['colorHex'] = this.colorHex;
    data['order'] = this.order;
    data['parentCategoryId'] = this.parentCategoryId;
    return data;
  }
}

export interface ICategoryCreateModel {
  title?: string;
  description?: string | undefined;
  colorHex?: string;
  order?: number;
  parentCategoryId?: string | undefined;
}

export class CategoryModel implements ICategoryModel {
  id?: string;
  title?: string;
  description?: string | undefined;
  colorHex?: string;
  thumbnailUrl?: string | undefined;
  position?: number | undefined;
  courses?: RoadmapModel[];
  parentRelations?: CategoryModel[];
  childCategories?: CategoryModel[];

  constructor(data?: ICategoryModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.colorHex = _data['colorHex'];
      this.thumbnailUrl = _data['thumbnailUrl'];
      this.position = _data['position'];
      if (Array.isArray(_data['courses'])) {
        this.courses = [] as any;
        for (let item of _data['courses'])
          this.courses!.push(RoadmapModel.fromJS(item));
      }
      if (Array.isArray(_data['parentRelations'])) {
        this.parentRelations = [] as any;
        for (let item of _data['parentRelations'])
          this.parentRelations!.push(CategoryModel.fromJS(item));
      }
      if (Array.isArray(_data['childCategories'])) {
        this.childCategories = [] as any;
        for (let item of _data['childCategories'])
          this.childCategories!.push(CategoryModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CategoryModel {
    data = typeof data === 'object' ? data : {};
    let result = new CategoryModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['description'] = this.description;
    data['colorHex'] = this.colorHex;
    data['thumbnailUrl'] = this.thumbnailUrl;
    data['position'] = this.position;
    if (Array.isArray(this.courses)) {
      data['courses'] = [];
      for (let item of this.courses) data['courses'].push(item.toJSON());
    }
    if (Array.isArray(this.parentRelations)) {
      data['parentRelations'] = [];
      for (let item of this.parentRelations)
        data['parentRelations'].push(item.toJSON());
    }
    if (Array.isArray(this.childCategories)) {
      data['childCategories'] = [];
      for (let item of this.childCategories)
        data['childCategories'].push(item.toJSON());
    }
    return data;
  }
}

export interface ICategoryModel {
  id?: string;
  title?: string;
  description?: string | undefined;
  colorHex?: string;
  thumbnailUrl?: string | undefined;
  position?: number | undefined;
  courses?: RoadmapModel[];
  parentRelations?: CategoryModel[];
  childCategories?: CategoryModel[];
}

export class CategoryPageModel implements ICategoryPageModel {
  category?: CategoryModel;
  topCourses?: RoadmapModel[];
  newCourses?: RoadmapModel[];
  relatedCategories?: CategorySliderModel[];
  childCategories?: CategorySliderModel[];

  constructor(data?: ICategoryPageModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.category = _data['category']
        ? CategoryModel.fromJS(_data['category'])
        : <any>undefined;
      if (Array.isArray(_data['topCourses'])) {
        this.topCourses = [] as any;
        for (let item of _data['topCourses'])
          this.topCourses!.push(RoadmapModel.fromJS(item));
      }
      if (Array.isArray(_data['newCourses'])) {
        this.newCourses = [] as any;
        for (let item of _data['newCourses'])
          this.newCourses!.push(RoadmapModel.fromJS(item));
      }
      if (Array.isArray(_data['relatedCategories'])) {
        this.relatedCategories = [] as any;
        for (let item of _data['relatedCategories'])
          this.relatedCategories!.push(CategorySliderModel.fromJS(item));
      }
      if (Array.isArray(_data['childCategories'])) {
        this.childCategories = [] as any;
        for (let item of _data['childCategories'])
          this.childCategories!.push(CategorySliderModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CategoryPageModel {
    data = typeof data === 'object' ? data : {};
    let result = new CategoryPageModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['category'] = this.category ? this.category.toJSON() : <any>undefined;
    if (Array.isArray(this.topCourses)) {
      data['topCourses'] = [];
      for (let item of this.topCourses) data['topCourses'].push(item.toJSON());
    }
    if (Array.isArray(this.newCourses)) {
      data['newCourses'] = [];
      for (let item of this.newCourses) data['newCourses'].push(item.toJSON());
    }
    if (Array.isArray(this.relatedCategories)) {
      data['relatedCategories'] = [];
      for (let item of this.relatedCategories)
        data['relatedCategories'].push(item.toJSON());
    }
    if (Array.isArray(this.childCategories)) {
      data['childCategories'] = [];
      for (let item of this.childCategories)
        data['childCategories'].push(item.toJSON());
    }
    return data;
  }
}

export interface ICategoryPageModel {
  category?: CategoryModel;
  topCourses?: RoadmapModel[];
  newCourses?: RoadmapModel[];
  relatedCategories?: CategorySliderModel[];
  childCategories?: CategorySliderModel[];
}

export class CategorySliderModel implements ICategorySliderModel {
  id?: string;
  title?: string;
  colorHex?: string;
  order?: number;

  constructor(data?: ICategorySliderModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.colorHex = _data['colorHex'];
      this.order = _data['order'];
    }
  }

  static fromJS(data: any): CategorySliderModel {
    data = typeof data === 'object' ? data : {};
    let result = new CategorySliderModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['colorHex'] = this.colorHex;
    data['order'] = this.order;
    return data;
  }
}

export interface ICategorySliderModel {
  id?: string;
  title?: string;
  colorHex?: string;
  order?: number;
}

export class CategoryUpdateModel implements ICategoryUpdateModel {
  id?: string;
  title?: string;
  description?: string | undefined;
  colorHex?: string;
  order?: number;

  constructor(data?: ICategoryUpdateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.colorHex = _data['colorHex'];
      this.order = _data['order'];
    }
  }

  static fromJS(data: any): CategoryUpdateModel {
    data = typeof data === 'object' ? data : {};
    let result = new CategoryUpdateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['description'] = this.description;
    data['colorHex'] = this.colorHex;
    data['order'] = this.order;
    return data;
  }
}

export interface ICategoryUpdateModel {
  id?: string;
  title?: string;
  description?: string | undefined;
  colorHex?: string;
  order?: number;
}

export class CompleteRegistrationRequest
  implements ICompleteRegistrationRequest
{
  licenseKey?: string;
  email?: string;

  constructor(data?: ICompleteRegistrationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.licenseKey = _data['licenseKey'];
      this.email = _data['email'];
    }
  }

  static fromJS(data: any): CompleteRegistrationRequest {
    data = typeof data === 'object' ? data : {};
    let result = new CompleteRegistrationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['licenseKey'] = this.licenseKey;
    data['email'] = this.email;
    return data;
  }
}

export interface ICompleteRegistrationRequest {
  licenseKey?: string;
  email?: string;
}

export class CourseTypeCreateModel implements ICourseTypeCreateModel {
  name?: string;
  description?: string | undefined;
  order?: number;

  constructor(data?: ICourseTypeCreateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.description = _data['description'];
      this.order = _data['order'];
    }
  }

  static fromJS(data: any): CourseTypeCreateModel {
    data = typeof data === 'object' ? data : {};
    let result = new CourseTypeCreateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['description'] = this.description;
    data['order'] = this.order;
    return data;
  }
}

export interface ICourseTypeCreateModel {
  name?: string;
  description?: string | undefined;
  order?: number;
}

export class CourseTypeUpdateModel implements ICourseTypeUpdateModel {
  name?: string;
  description?: string | undefined;
  order?: number;

  constructor(data?: ICourseTypeUpdateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.description = _data['description'];
      this.order = _data['order'];
    }
  }

  static fromJS(data: any): CourseTypeUpdateModel {
    data = typeof data === 'object' ? data : {};
    let result = new CourseTypeUpdateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['description'] = this.description;
    data['order'] = this.order;
    return data;
  }
}

export interface ICourseTypeUpdateModel {
  name?: string;
  description?: string | undefined;
  order?: number;
}

export class CreatePaymentRequest implements ICreatePaymentRequest {
  planType?: string;
  planPrice?: number;
  planDescription?: string | undefined;
  email?: string | undefined;

  constructor(data?: ICreatePaymentRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.planType = _data['planType'];
      this.planPrice = _data['planPrice'];
      this.planDescription = _data['planDescription'];
      this.email = _data['email'];
    }
  }

  static fromJS(data: any): CreatePaymentRequest {
    data = typeof data === 'object' ? data : {};
    let result = new CreatePaymentRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['planType'] = this.planType;
    data['planPrice'] = this.planPrice;
    data['planDescription'] = this.planDescription;
    data['email'] = this.email;
    return data;
  }
}

export interface ICreatePaymentRequest {
  planType?: string;
  planPrice?: number;
  planDescription?: string | undefined;
  email?: string | undefined;
}

export class DeletePlanRequest implements IDeletePlanRequest {
  plan?: string;

  constructor(data?: IDeletePlanRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.plan = _data['plan'];
    }
  }

  static fromJS(data: any): DeletePlanRequest {
    data = typeof data === 'object' ? data : {};
    let result = new DeletePlanRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['plan'] = this.plan;
    return data;
  }
}

export interface IDeletePlanRequest {
  plan?: string;
}

/** Record that represents a default HTTP error response. */
export class ErrorDto implements IErrorDto {
  status?: number;
  type?: string;
  message?: string;
  /** A set of additional errors. */
  errors?: { [key: string]: any } | undefined;

  constructor(data?: IErrorDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.status = _data['status'];
      this.type = _data['type'];
      this.message = _data['message'];
      if (_data['errors']) {
        this.errors = {} as any;
        for (let key in _data['errors']) {
          if (_data['errors'].hasOwnProperty(key))
            (<any>this.errors)![key] = _data['errors'][key];
        }
      }
    }
  }

  static fromJS(data: any): ErrorDto {
    data = typeof data === 'object' ? data : {};
    let result = new ErrorDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['status'] = this.status;
    data['type'] = this.type;
    data['message'] = this.message;
    if (this.errors) {
      data['errors'] = {};
      for (let key in this.errors) {
        if (this.errors.hasOwnProperty(key))
          (<any>data['errors'])[key] = (<any>this.errors)[key];
      }
    }
    return data;
  }
}

/** Record that represents a default HTTP error response. */
export interface IErrorDto {
  status?: number;
  type?: string;
  message?: string;
  /** A set of additional errors. */
  errors?: { [key: string]: any } | undefined;
}

export class ExplorePageModel implements IExplorePageModel {
  categories?: CategorySliderModel[];
  newCourses?: RoadmapModel[];
  topCourses?: RoadmapModel[];
  betterYouCourses?: RoadmapModel[];
  newToLevenueCourses?: RoadmapModel[];

  constructor(data?: IExplorePageModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['categories'])) {
        this.categories = [] as any;
        for (let item of _data['categories'])
          this.categories!.push(CategorySliderModel.fromJS(item));
      }
      if (Array.isArray(_data['newCourses'])) {
        this.newCourses = [] as any;
        for (let item of _data['newCourses'])
          this.newCourses!.push(RoadmapModel.fromJS(item));
      }
      if (Array.isArray(_data['topCourses'])) {
        this.topCourses = [] as any;
        for (let item of _data['topCourses'])
          this.topCourses!.push(RoadmapModel.fromJS(item));
      }
      if (Array.isArray(_data['betterYouCourses'])) {
        this.betterYouCourses = [] as any;
        for (let item of _data['betterYouCourses'])
          this.betterYouCourses!.push(RoadmapModel.fromJS(item));
      }
      if (Array.isArray(_data['newToLevenueCourses'])) {
        this.newToLevenueCourses = [] as any;
        for (let item of _data['newToLevenueCourses'])
          this.newToLevenueCourses!.push(RoadmapModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ExplorePageModel {
    data = typeof data === 'object' ? data : {};
    let result = new ExplorePageModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.categories)) {
      data['categories'] = [];
      for (let item of this.categories) data['categories'].push(item.toJSON());
    }
    if (Array.isArray(this.newCourses)) {
      data['newCourses'] = [];
      for (let item of this.newCourses) data['newCourses'].push(item.toJSON());
    }
    if (Array.isArray(this.topCourses)) {
      data['topCourses'] = [];
      for (let item of this.topCourses) data['topCourses'].push(item.toJSON());
    }
    if (Array.isArray(this.betterYouCourses)) {
      data['betterYouCourses'] = [];
      for (let item of this.betterYouCourses)
        data['betterYouCourses'].push(item.toJSON());
    }
    if (Array.isArray(this.newToLevenueCourses)) {
      data['newToLevenueCourses'] = [];
      for (let item of this.newToLevenueCourses)
        data['newToLevenueCourses'].push(item.toJSON());
    }
    return data;
  }
}

export interface IExplorePageModel {
  categories?: CategorySliderModel[];
  newCourses?: RoadmapModel[];
  topCourses?: RoadmapModel[];
  betterYouCourses?: RoadmapModel[];
  newToLevenueCourses?: RoadmapModel[];
}

export class GenerateImageRequest implements IGenerateImageRequest {
  prompt!: string;
  width?: number | undefined;
  height?: number | undefined;
  stylePreset?: string | undefined;
  fileName?: string | undefined;
  savePath?: string | undefined;

  constructor(data?: IGenerateImageRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.prompt = _data['prompt'];
      this.width = _data['width'];
      this.height = _data['height'];
      this.stylePreset = _data['stylePreset'];
      this.fileName = _data['fileName'];
      this.savePath = _data['savePath'];
    }
  }

  static fromJS(data: any): GenerateImageRequest {
    data = typeof data === 'object' ? data : {};
    let result = new GenerateImageRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['prompt'] = this.prompt;
    data['width'] = this.width;
    data['height'] = this.height;
    data['stylePreset'] = this.stylePreset;
    data['fileName'] = this.fileName;
    data['savePath'] = this.savePath;
    return data;
  }
}

export interface IGenerateImageRequest {
  prompt: string;
  width?: number | undefined;
  height?: number | undefined;
  stylePreset?: string | undefined;
  fileName?: string | undefined;
  savePath?: string | undefined;
}

export class LessonContent implements ILessonContent {
  mainContent?: string | undefined;
  resources?: string[] | undefined;
  examples?: string[] | undefined;

  constructor(data?: ILessonContent) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.mainContent = _data['mainContent'];
      if (Array.isArray(_data['resources'])) {
        this.resources = [] as any;
        for (let item of _data['resources']) this.resources!.push(item);
      }
      if (Array.isArray(_data['examples'])) {
        this.examples = [] as any;
        for (let item of _data['examples']) this.examples!.push(item);
      }
    }
  }

  static fromJS(data: any): LessonContent {
    data = typeof data === 'object' ? data : {};
    let result = new LessonContent();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['mainContent'] = this.mainContent;
    if (Array.isArray(this.resources)) {
      data['resources'] = [];
      for (let item of this.resources) data['resources'].push(item);
    }
    if (Array.isArray(this.examples)) {
      data['examples'] = [];
      for (let item of this.examples) data['examples'].push(item);
    }
    return data;
  }
}

export interface ILessonContent {
  mainContent?: string | undefined;
  resources?: string[] | undefined;
  examples?: string[] | undefined;
}

export class LessonCreateRequest implements ILessonCreateRequest {
  id?: string;
  title?: string;
  completed?: boolean;
  order?: number;
  description?: string | undefined;
  content?: LessonContent;
  quizzes?: QuizModel[];

  constructor(data?: ILessonCreateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.completed = _data['completed'];
      this.order = _data['order'];
      this.description = _data['description'];
      this.content = _data['content']
        ? LessonContent.fromJS(_data['content'])
        : <any>undefined;
      if (Array.isArray(_data['quizzes'])) {
        this.quizzes = [] as any;
        for (let item of _data['quizzes'])
          this.quizzes!.push(QuizModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): LessonCreateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new LessonCreateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['completed'] = this.completed;
    data['order'] = this.order;
    data['description'] = this.description;
    data['content'] = this.content ? this.content.toJSON() : <any>undefined;
    if (Array.isArray(this.quizzes)) {
      data['quizzes'] = [];
      for (let item of this.quizzes) data['quizzes'].push(item.toJSON());
    }
    return data;
  }
}

export interface ILessonCreateRequest {
  id?: string;
  title?: string;
  completed?: boolean;
  order?: number;
  description?: string | undefined;
  content?: LessonContent;
  quizzes?: QuizModel[];
}

export class LessonModel implements ILessonModel {
  id?: string;
  title?: string;
  completed?: boolean;
  order?: number;
  description?: string | undefined;
  content?: LessonContent;
  quizzes?: QuizModel[];

  constructor(data?: ILessonModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.completed = _data['completed'];
      this.order = _data['order'];
      this.description = _data['description'];
      this.content = _data['content']
        ? LessonContent.fromJS(_data['content'])
        : <any>undefined;
      if (Array.isArray(_data['quizzes'])) {
        this.quizzes = [] as any;
        for (let item of _data['quizzes'])
          this.quizzes!.push(QuizModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): LessonModel {
    data = typeof data === 'object' ? data : {};
    let result = new LessonModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['completed'] = this.completed;
    data['order'] = this.order;
    data['description'] = this.description;
    data['content'] = this.content ? this.content.toJSON() : <any>undefined;
    if (Array.isArray(this.quizzes)) {
      data['quizzes'] = [];
      for (let item of this.quizzes) data['quizzes'].push(item.toJSON());
    }
    return data;
  }
}

export interface ILessonModel {
  id?: string;
  title?: string;
  completed?: boolean;
  order?: number;
  description?: string | undefined;
  content?: LessonContent;
  quizzes?: QuizModel[];
}

export class LessonModelFiltered implements ILessonModelFiltered {
  data?: LessonModel[];
  total?: number;
  columns?: string[] | undefined;

  constructor(data?: ILessonModelFiltered) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(LessonModel.fromJS(item));
      }
      this.total = _data['total'];
      if (Array.isArray(_data['columns'])) {
        this.columns = [] as any;
        for (let item of _data['columns']) this.columns!.push(item);
      }
    }
  }

  static fromJS(data: any): LessonModelFiltered {
    data = typeof data === 'object' ? data : {};
    let result = new LessonModelFiltered();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['total'] = this.total;
    if (Array.isArray(this.columns)) {
      data['columns'] = [];
      for (let item of this.columns) data['columns'].push(item);
    }
    return data;
  }
}

export interface ILessonModelFiltered {
  data?: LessonModel[];
  total?: number;
  columns?: string[] | undefined;
}

export class LessonUpdateRequest implements ILessonUpdateRequest {
  title?: string;
  completed?: boolean;
  order?: number;
  description?: string | undefined;
  content?: LessonContent;
  quizzes?: QuizModel[];
  lessonId?: string | undefined;
  lessonCompleted?: boolean | undefined;

  constructor(data?: ILessonUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.completed = _data['completed'];
      this.order = _data['order'];
      this.description = _data['description'];
      this.content = _data['content']
        ? LessonContent.fromJS(_data['content'])
        : <any>undefined;
      if (Array.isArray(_data['quizzes'])) {
        this.quizzes = [] as any;
        for (let item of _data['quizzes'])
          this.quizzes!.push(QuizModel.fromJS(item));
      }
      this.lessonId = _data['lessonId'];
      this.lessonCompleted = _data['lessonCompleted'];
    }
  }

  static fromJS(data: any): LessonUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new LessonUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['completed'] = this.completed;
    data['order'] = this.order;
    data['description'] = this.description;
    data['content'] = this.content ? this.content.toJSON() : <any>undefined;
    if (Array.isArray(this.quizzes)) {
      data['quizzes'] = [];
      for (let item of this.quizzes) data['quizzes'].push(item.toJSON());
    }
    data['lessonId'] = this.lessonId;
    data['lessonCompleted'] = this.lessonCompleted;
    return data;
  }
}

export interface ILessonUpdateRequest {
  title?: string;
  completed?: boolean;
  order?: number;
  description?: string | undefined;
  content?: LessonContent;
  quizzes?: QuizModel[];
  lessonId?: string | undefined;
  lessonCompleted?: boolean | undefined;
}

export class PasswordLoginRequest implements IPasswordLoginRequest {
  email?: string;
  password?: string;

  constructor(data?: IPasswordLoginRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data['email'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any): PasswordLoginRequest {
    data = typeof data === 'object' ? data : {};
    let result = new PasswordLoginRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['email'] = this.email;
    data['password'] = this.password;
    return data;
  }
}

export interface IPasswordLoginRequest {
  email?: string;
  password?: string;
}

export class PatchOperation implements IPatchOperation {
  op?: PatchOperationOp;
  path?: string;
  from?: string;
  value?: string;

  [key: string]: any;

  constructor(data?: IPatchOperation) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.op = _data['op'];
      this.path = _data['path'];
      this.from = _data['from'];
      this.value = _data['value'];
    }
  }

  static fromJS(data: any): PatchOperation {
    data = typeof data === 'object' ? data : {};
    let result = new PatchOperation();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data['op'] = this.op;
    data['path'] = this.path;
    data['from'] = this.from;
    data['value'] = this.value;
    return data;
  }
}

export interface IPatchOperation {
  op?: PatchOperationOp;
  path?: string;
  from?: string;
  value?: string;

  [key: string]: any;
}

export class PaymentLoginRequest implements IPaymentLoginRequest {
  orderReference?: string;

  constructor(data?: IPaymentLoginRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderReference = _data['orderReference'];
    }
  }

  static fromJS(data: any): PaymentLoginRequest {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentLoginRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderReference'] = this.orderReference;
    return data;
  }
}

export interface IPaymentLoginRequest {
  orderReference?: string;
}

export class PositionRequest implements IPositionRequest {
  position?: number | undefined;

  constructor(data?: IPositionRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.position = _data['position'];
    }
  }

  static fromJS(data: any): PositionRequest {
    data = typeof data === 'object' ? data : {};
    let result = new PositionRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['position'] = this.position;
    return data;
  }
}

export interface IPositionRequest {
  position?: number | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data['type'];
      this.title = _data['title'];
      this.status = _data['status'];
      this.detail = _data['detail'];
      this.instance = _data['instance'];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data['type'] = this.type;
    data['title'] = this.title;
    data['status'] = this.status;
    data['detail'] = this.detail;
    data['instance'] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class QuizModel implements IQuizModel {
  id?: string;
  question?: string;
  answers?: string[];
  correctAnswerIndex?: number;

  constructor(data?: IQuizModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.question = _data['question'];
      if (Array.isArray(_data['answers'])) {
        this.answers = [] as any;
        for (let item of _data['answers']) this.answers!.push(item);
      }
      this.correctAnswerIndex = _data['correctAnswerIndex'];
    }
  }

  static fromJS(data: any): QuizModel {
    data = typeof data === 'object' ? data : {};
    let result = new QuizModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['question'] = this.question;
    if (Array.isArray(this.answers)) {
      data['answers'] = [];
      for (let item of this.answers) data['answers'].push(item);
    }
    data['correctAnswerIndex'] = this.correctAnswerIndex;
    return data;
  }
}

export interface IQuizModel {
  id?: string;
  question?: string;
  answers?: string[];
  correctAnswerIndex?: number;
}

export class RefillTokensRequest implements IRefillTokensRequest {
  userId?: number;
  amount?: number;

  constructor(data?: IRefillTokensRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.amount = _data['amount'];
    }
  }

  static fromJS(data: any): RefillTokensRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RefillTokensRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['amount'] = this.amount;
    return data;
  }
}

export interface IRefillTokensRequest {
  userId?: number;
  amount?: number;
}

export class RoadmapCreateRequest implements IRoadmapCreateRequest {
  title?: string | undefined;
  topic?: string | undefined;
  estimatedDuration?: number | undefined;
  description?: string | undefined;
  tags?: string[] | undefined;
  authorId?: number | undefined;
  likes?: number | undefined;
  modules?: RoadmapModuleModel[];
  thumbnailUrl?: string | undefined;
  price?: number;
  isTest?: boolean;

  constructor(data?: IRoadmapCreateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.topic = _data['topic'];
      this.estimatedDuration = _data['estimatedDuration'];
      this.description = _data['description'];
      if (Array.isArray(_data['tags'])) {
        this.tags = [] as any;
        for (let item of _data['tags']) this.tags!.push(item);
      }
      this.authorId = _data['authorId'];
      this.likes = _data['likes'];
      if (Array.isArray(_data['modules'])) {
        this.modules = [] as any;
        for (let item of _data['modules'])
          this.modules!.push(RoadmapModuleModel.fromJS(item));
      }
      this.thumbnailUrl = _data['thumbnailUrl'];
      this.price = _data['price'];
      this.isTest = _data['isTest'];
    }
  }

  static fromJS(data: any): RoadmapCreateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapCreateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['topic'] = this.topic;
    data['estimatedDuration'] = this.estimatedDuration;
    data['description'] = this.description;
    if (Array.isArray(this.tags)) {
      data['tags'] = [];
      for (let item of this.tags) data['tags'].push(item);
    }
    data['authorId'] = this.authorId;
    data['likes'] = this.likes;
    if (Array.isArray(this.modules)) {
      data['modules'] = [];
      for (let item of this.modules) data['modules'].push(item.toJSON());
    }
    data['thumbnailUrl'] = this.thumbnailUrl;
    data['price'] = this.price;
    data['isTest'] = this.isTest;
    return data;
  }
}

export interface IRoadmapCreateRequest {
  title?: string | undefined;
  topic?: string | undefined;
  estimatedDuration?: number | undefined;
  description?: string | undefined;
  tags?: string[] | undefined;
  authorId?: number | undefined;
  likes?: number | undefined;
  modules?: RoadmapModuleModel[];
  thumbnailUrl?: string | undefined;
  price?: number;
  isTest?: boolean;
}

export class RoadmapModel implements IRoadmapModel {
  title?: string | undefined;
  topic?: string | undefined;
  estimatedDuration?: number | undefined;
  description?: string | undefined;
  tags?: string[] | undefined;
  authorId?: number | undefined;
  likes?: number | undefined;
  modules?: RoadmapModuleModel[];
  thumbnailUrl?: string | undefined;
  id?: string;

  constructor(data?: IRoadmapModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.topic = _data['topic'];
      this.estimatedDuration = _data['estimatedDuration'];
      this.description = _data['description'];
      if (Array.isArray(_data['tags'])) {
        this.tags = [] as any;
        for (let item of _data['tags']) this.tags!.push(item);
      }
      this.authorId = _data['authorId'];
      this.likes = _data['likes'];
      if (Array.isArray(_data['modules'])) {
        this.modules = [] as any;
        for (let item of _data['modules'])
          this.modules!.push(RoadmapModuleModel.fromJS(item));
      }
      this.thumbnailUrl = _data['thumbnailUrl'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any): RoadmapModel {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['topic'] = this.topic;
    data['estimatedDuration'] = this.estimatedDuration;
    data['description'] = this.description;
    if (Array.isArray(this.tags)) {
      data['tags'] = [];
      for (let item of this.tags) data['tags'].push(item);
    }
    data['authorId'] = this.authorId;
    data['likes'] = this.likes;
    if (Array.isArray(this.modules)) {
      data['modules'] = [];
      for (let item of this.modules) data['modules'].push(item.toJSON());
    }
    data['thumbnailUrl'] = this.thumbnailUrl;
    data['id'] = this.id;
    return data;
  }
}

export interface IRoadmapModel {
  title?: string | undefined;
  topic?: string | undefined;
  estimatedDuration?: number | undefined;
  description?: string | undefined;
  tags?: string[] | undefined;
  authorId?: number | undefined;
  likes?: number | undefined;
  modules?: RoadmapModuleModel[];
  thumbnailUrl?: string | undefined;
  id?: string;
}

export class RoadmapModelFiltered implements IRoadmapModelFiltered {
  data?: RoadmapModel[];
  total?: number;
  columns?: string[] | undefined;

  constructor(data?: IRoadmapModelFiltered) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(RoadmapModel.fromJS(item));
      }
      this.total = _data['total'];
      if (Array.isArray(_data['columns'])) {
        this.columns = [] as any;
        for (let item of _data['columns']) this.columns!.push(item);
      }
    }
  }

  static fromJS(data: any): RoadmapModelFiltered {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapModelFiltered();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['total'] = this.total;
    if (Array.isArray(this.columns)) {
      data['columns'] = [];
      for (let item of this.columns) data['columns'].push(item);
    }
    return data;
  }
}

export interface IRoadmapModelFiltered {
  data?: RoadmapModel[];
  total?: number;
  columns?: string[] | undefined;
}

export class RoadmapModuleModel implements IRoadmapModuleModel {
  id?: string;
  title?: string;
  order?: number;
  lessons?: LessonModel[];

  constructor(data?: IRoadmapModuleModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.order = _data['order'];
      if (Array.isArray(_data['lessons'])) {
        this.lessons = [] as any;
        for (let item of _data['lessons'])
          this.lessons!.push(LessonModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): RoadmapModuleModel {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapModuleModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['order'] = this.order;
    if (Array.isArray(this.lessons)) {
      data['lessons'] = [];
      for (let item of this.lessons) data['lessons'].push(item.toJSON());
    }
    return data;
  }
}

export interface IRoadmapModuleModel {
  id?: string;
  title?: string;
  order?: number;
  lessons?: LessonModel[];
}

export class RoadmapUpdateRequest implements IRoadmapUpdateRequest {
  title?: string | undefined;
  topic?: string | undefined;
  estimatedDuration?: number | undefined;
  description?: string | undefined;
  tags?: string[] | undefined;
  authorId?: number | undefined;
  likes?: number | undefined;
  modules?: RoadmapModuleModel[];
  thumbnailUrl?: string | undefined;
  lessonId?: string | undefined;
  lessonContent?: string | undefined;

  constructor(data?: IRoadmapUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.topic = _data['topic'];
      this.estimatedDuration = _data['estimatedDuration'];
      this.description = _data['description'];
      if (Array.isArray(_data['tags'])) {
        this.tags = [] as any;
        for (let item of _data['tags']) this.tags!.push(item);
      }
      this.authorId = _data['authorId'];
      this.likes = _data['likes'];
      if (Array.isArray(_data['modules'])) {
        this.modules = [] as any;
        for (let item of _data['modules'])
          this.modules!.push(RoadmapModuleModel.fromJS(item));
      }
      this.thumbnailUrl = _data['thumbnailUrl'];
      this.lessonId = _data['lessonId'];
      this.lessonContent = _data['lessonContent'];
    }
  }

  static fromJS(data: any): RoadmapUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['topic'] = this.topic;
    data['estimatedDuration'] = this.estimatedDuration;
    data['description'] = this.description;
    if (Array.isArray(this.tags)) {
      data['tags'] = [];
      for (let item of this.tags) data['tags'].push(item);
    }
    data['authorId'] = this.authorId;
    data['likes'] = this.likes;
    if (Array.isArray(this.modules)) {
      data['modules'] = [];
      for (let item of this.modules) data['modules'].push(item.toJSON());
    }
    data['thumbnailUrl'] = this.thumbnailUrl;
    data['lessonId'] = this.lessonId;
    data['lessonContent'] = this.lessonContent;
    return data;
  }
}

export interface IRoadmapUpdateRequest {
  title?: string | undefined;
  topic?: string | undefined;
  estimatedDuration?: number | undefined;
  description?: string | undefined;
  tags?: string[] | undefined;
  authorId?: number | undefined;
  likes?: number | undefined;
  modules?: RoadmapModuleModel[];
  thumbnailUrl?: string | undefined;
  lessonId?: string | undefined;
  lessonContent?: string | undefined;
}

export class SendMagicLinkRequest implements ISendMagicLinkRequest {
  userId?: number;
  returnUrl?: string;

  constructor(data?: ISendMagicLinkRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.returnUrl = _data['returnUrl'];
    }
  }

  static fromJS(data: any): SendMagicLinkRequest {
    data = typeof data === 'object' ? data : {};
    let result = new SendMagicLinkRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['returnUrl'] = this.returnUrl;
    return data;
  }
}

export interface ISendMagicLinkRequest {
  userId?: number;
  returnUrl?: string;
}

export class ServerInfoModel implements IServerInfoModel {
  name!: string;
  apiVersion!: string;
  buildId!: string;

  constructor(data?: IServerInfoModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.apiVersion = _data['apiVersion'];
      this.buildId = _data['buildId'];
    }
  }

  static fromJS(data: any): ServerInfoModel {
    data = typeof data === 'object' ? data : {};
    let result = new ServerInfoModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['apiVersion'] = this.apiVersion;
    data['buildId'] = this.buildId;
    return data;
  }
}

export interface IServerInfoModel {
  name: string;
  apiVersion: string;
  buildId: string;
}

export class UpdateDefaultUsersRequest implements IUpdateDefaultUsersRequest {
  plan?: string;

  constructor(data?: IUpdateDefaultUsersRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.plan = _data['plan'];
    }
  }

  static fromJS(data: any): UpdateDefaultUsersRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateDefaultUsersRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['plan'] = this.plan;
    return data;
  }
}

export interface IUpdateDefaultUsersRequest {
  plan?: string;
}

export class UpdateUsersTokensRequest implements IUpdateUsersTokensRequest {
  tokensAmount?: number;

  constructor(data?: IUpdateUsersTokensRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tokensAmount = _data['tokensAmount'];
    }
  }

  static fromJS(data: any): UpdateUsersTokensRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateUsersTokensRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tokensAmount'] = this.tokensAmount;
    return data;
  }
}

export interface IUpdateUsersTokensRequest {
  tokensAmount?: number;
}

export class UserCreateRequest implements IUserCreateRequest {
  name?: string;
  email?: string;
  bio?: string;
  emailConfirmed?: boolean;

  constructor(data?: IUserCreateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.email = _data['email'];
      this.bio = _data['bio'];
      this.emailConfirmed = _data['emailConfirmed'];
    }
  }

  static fromJS(data: any): UserCreateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UserCreateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['email'] = this.email;
    data['bio'] = this.bio;
    data['emailConfirmed'] = this.emailConfirmed;
    return data;
  }
}

export interface IUserCreateRequest {
  name?: string;
  email?: string;
  bio?: string;
  emailConfirmed?: boolean;
}

export class UserLikeAddRequest implements IUserLikeAddRequest {
  userId?: number;
  roadmapId?: string;
  user?: UserModel;
  roadmap?: RoadmapModel;

  constructor(data?: IUserLikeAddRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.roadmapId = _data['roadmapId'];
      this.user = _data['user']
        ? UserModel.fromJS(_data['user'])
        : <any>undefined;
      this.roadmap = _data['roadmap']
        ? RoadmapModel.fromJS(_data['roadmap'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): UserLikeAddRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UserLikeAddRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['roadmapId'] = this.roadmapId;
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    data['roadmap'] = this.roadmap ? this.roadmap.toJSON() : <any>undefined;
    return data;
  }
}

export interface IUserLikeAddRequest {
  userId?: number;
  roadmapId?: string;
  user?: UserModel;
  roadmap?: RoadmapModel;
}

export class UserLikeModel implements IUserLikeModel {
  userId?: number;
  roadmapId?: string;
  user?: UserModel;
  roadmap?: RoadmapModel;

  constructor(data?: IUserLikeModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.roadmapId = _data['roadmapId'];
      this.user = _data['user']
        ? UserModel.fromJS(_data['user'])
        : <any>undefined;
      this.roadmap = _data['roadmap']
        ? RoadmapModel.fromJS(_data['roadmap'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): UserLikeModel {
    data = typeof data === 'object' ? data : {};
    let result = new UserLikeModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['roadmapId'] = this.roadmapId;
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    data['roadmap'] = this.roadmap ? this.roadmap.toJSON() : <any>undefined;
    return data;
  }
}

export interface IUserLikeModel {
  userId?: number;
  roadmapId?: string;
  user?: UserModel;
  roadmap?: RoadmapModel;
}

export class UserModel implements IUserModel {
  name?: string;
  email?: string;
  bio?: string;
  emailConfirmed?: boolean;
  id?: number;

  constructor(data?: IUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.email = _data['email'];
      this.bio = _data['bio'];
      this.emailConfirmed = _data['emailConfirmed'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any): UserModel {
    data = typeof data === 'object' ? data : {};
    let result = new UserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['email'] = this.email;
    data['bio'] = this.bio;
    data['emailConfirmed'] = this.emailConfirmed;
    data['id'] = this.id;
    return data;
  }
}

export interface IUserModel {
  name?: string;
  email?: string;
  bio?: string;
  emailConfirmed?: boolean;
  id?: number;
}

export class UserQuizModel implements IUserQuizModel {
  quizId?: string;
  answerIndex?: number;

  constructor(data?: IUserQuizModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.quizId = _data['quizId'];
      this.answerIndex = _data['answerIndex'];
    }
  }

  static fromJS(data: any): UserQuizModel {
    data = typeof data === 'object' ? data : {};
    let result = new UserQuizModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quizId'] = this.quizId;
    data['answerIndex'] = this.answerIndex;
    return data;
  }
}

export interface IUserQuizModel {
  quizId?: string;
  answerIndex?: number;
}

export class UserQuizModelFiltered implements IUserQuizModelFiltered {
  data?: UserQuizModel[];
  total?: number;
  columns?: string[] | undefined;

  constructor(data?: IUserQuizModelFiltered) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(UserQuizModel.fromJS(item));
      }
      this.total = _data['total'];
      if (Array.isArray(_data['columns'])) {
        this.columns = [] as any;
        for (let item of _data['columns']) this.columns!.push(item);
      }
    }
  }

  static fromJS(data: any): UserQuizModelFiltered {
    data = typeof data === 'object' ? data : {};
    let result = new UserQuizModelFiltered();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['total'] = this.total;
    if (Array.isArray(this.columns)) {
      data['columns'] = [];
      for (let item of this.columns) data['columns'].push(item);
    }
    return data;
  }
}

export interface IUserQuizModelFiltered {
  data?: UserQuizModel[];
  total?: number;
  columns?: string[] | undefined;
}

export class UserQuizResultUpdateRequest
  implements IUserQuizResultUpdateRequest
{
  quizId?: string;
  answerIndex?: number;

  constructor(data?: IUserQuizResultUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.quizId = _data['quizId'];
      this.answerIndex = _data['answerIndex'];
    }
  }

  static fromJS(data: any): UserQuizResultUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UserQuizResultUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quizId'] = this.quizId;
    data['answerIndex'] = this.answerIndex;
    return data;
  }
}

export interface IUserQuizResultUpdateRequest {
  quizId?: string;
  answerIndex?: number;
}

export class UserRoadmapModel implements IUserRoadmapModel {
  userId?: number;
  roadmapId?: string;
  user?: UserModel;
  roadmap?: RoadmapModel;

  constructor(data?: IUserRoadmapModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.roadmapId = _data['roadmapId'];
      this.user = _data['user']
        ? UserModel.fromJS(_data['user'])
        : <any>undefined;
      this.roadmap = _data['roadmap']
        ? RoadmapModel.fromJS(_data['roadmap'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): UserRoadmapModel {
    data = typeof data === 'object' ? data : {};
    let result = new UserRoadmapModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['roadmapId'] = this.roadmapId;
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    data['roadmap'] = this.roadmap ? this.roadmap.toJSON() : <any>undefined;
    return data;
  }
}

export interface IUserRoadmapModel {
  userId?: number;
  roadmapId?: string;
  user?: UserModel;
  roadmap?: RoadmapModel;
}

export class UserRoadmapModelFiltered implements IUserRoadmapModelFiltered {
  data?: UserRoadmapModel[];
  total?: number;
  columns?: string[] | undefined;

  constructor(data?: IUserRoadmapModelFiltered) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(UserRoadmapModel.fromJS(item));
      }
      this.total = _data['total'];
      if (Array.isArray(_data['columns'])) {
        this.columns = [] as any;
        for (let item of _data['columns']) this.columns!.push(item);
      }
    }
  }

  static fromJS(data: any): UserRoadmapModelFiltered {
    data = typeof data === 'object' ? data : {};
    let result = new UserRoadmapModelFiltered();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['total'] = this.total;
    if (Array.isArray(this.columns)) {
      data['columns'] = [];
      for (let item of this.columns) data['columns'].push(item);
    }
    return data;
  }
}

export interface IUserRoadmapModelFiltered {
  data?: UserRoadmapModel[];
  total?: number;
  columns?: string[] | undefined;
}

export class UserUpdateRequest implements IUserUpdateRequest {
  id?: number;
  name?: string | undefined;
  bio?: string | undefined;

  constructor(data?: IUserUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.bio = _data['bio'];
    }
  }

  static fromJS(data: any): UserUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UserUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['bio'] = this.bio;
    return data;
  }
}

export interface IUserUpdateRequest {
  id?: number;
  name?: string | undefined;
  bio?: string | undefined;
}

export class VerifyEmailRequest implements IVerifyEmailRequest {
  token?: string;
  returnUrl?: string | undefined;

  constructor(data?: IVerifyEmailRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data['token'];
      this.returnUrl = _data['returnUrl'];
    }
  }

  static fromJS(data: any): VerifyEmailRequest {
    data = typeof data === 'object' ? data : {};
    let result = new VerifyEmailRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['token'] = this.token;
    data['returnUrl'] = this.returnUrl;
    return data;
  }
}

export interface IVerifyEmailRequest {
  token?: string;
  returnUrl?: string | undefined;
}

export class WebhookExtra implements IWebhookExtra {
  reason?: string | undefined;

  constructor(data?: IWebhookExtra) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.reason = _data['reason'];
    }
  }

  static fromJS(data: any): WebhookExtra {
    data = typeof data === 'object' ? data : {};
    let result = new WebhookExtra();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['reason'] = this.reason;
    return data;
  }
}

export interface IWebhookExtra {
  reason?: string | undefined;
}

export class WelcomePageModel implements IWelcomePageModel {
  welcomeCourses?: RoadmapModel[];

  constructor(data?: IWelcomePageModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['welcomeCourses'])) {
        this.welcomeCourses = [] as any;
        for (let item of _data['welcomeCourses'])
          this.welcomeCourses!.push(RoadmapModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): WelcomePageModel {
    data = typeof data === 'object' ? data : {};
    let result = new WelcomePageModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.welcomeCourses)) {
      data['welcomeCourses'] = [];
      for (let item of this.welcomeCourses)
        data['welcomeCourses'].push(item.toJSON());
    }
    return data;
  }
}

export interface IWelcomePageModel {
  welcomeCourses?: RoadmapModel[];
}

export enum PatchOperationOp {
  Add = 'add',
  Copy = 'copy',
  Move = 'move',
  Remove = 'remove',
  Replace = 'replace',
  Test = 'test',
  Invalid = 'invalid'
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
